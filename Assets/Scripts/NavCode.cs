using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.AI; using UnityEngine.EventSystems;  public class NavCode : MonoBehaviour {  	public NavMeshAgent agent; 	public Vector3 referenceAngle;   	// SampleDistance is the max distance -- Sample within this distance from sourcePosition. 	public const float navMeshSampleDistance = 4f; 	public bool activeWalk = false;  	private void Awake() { 		agent.updateRotation = false; 	}  	void Start () { 		agent = this.GetComponent<NavMeshAgent> (); 		if (agent == null) { 			Debug.Log ("VR No agent attached!"); 		} 		//Debug.Log ("VR: NavCode is running & you got the nav mesh agent \"" + agent.name + "\""); 		Debug.Log (""); 	}  	/*void Update(){ 		Move (); 	} 	*/  	// COMMENT OUT OnGroundClick method 	/* 	public void OnGroundClick(BaseEventData data) { 		OVRRayPointerEventData pData = (OVRRayPointerEventData)data; 		Vector3 destinationPosition = Vector3.zero; 		NavMeshHit hit; 		if (NavMesh.SamplePosition(pData.pointerCurrentRaycast.worldPosition, out hit, navMeshSampleDistance, NavMesh.AllAreas)) { 			destinationPosition = hit.position; 			Debug.Log ("VR: the current hit position is " + destinationPosition); 		} 		else { 			destinationPosition = pData.pointerCurrentRaycast.worldPosition; 			Debug.Log ("VR: [Else-statement] the current destinationPosition is " + destinationPosition); 		}  		agent.isStopped = true; 		agent.SetDestination(destinationPosition); 		agent.isStopped = false; 	}*/ 	public void Move(){ 		if ((OVRInput.GetDown(OVRInput.Button.PrimaryTouchpad) && !activeWalk) || Input.GetKeyDown("space")){ 			activeWalk = true; 			referenceAngle = OVRInput.GetLocalControllerRotation (OVRInput.Controller.RTrackedRemote).eulerAngles; 			Debug.Log ("VR: referenceAngle is " + referenceAngle); 		} 		else if (OVRInput.GetDown (OVRInput.Button.PrimaryTouchpad) && activeWalk)	activeWalk = false; 		if (activeWalk) { 			Debug.Log("VR: new angle is -- "+OVRInput.GetLocalControllerRotation (OVRInput.Controller.RTrackedRemote).eulerAngles); 		} 		Debug.Log ("VRMove is getting called"); 	} } 